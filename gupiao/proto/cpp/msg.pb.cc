// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CSBuyOrSellReq::CSBuyOrSellReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.money_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.num_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_buy_)*/false} {}
struct CSBuyOrSellReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSBuyOrSellReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSBuyOrSellReqDefaultTypeInternal() {}
  union {
    CSBuyOrSellReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSBuyOrSellReqDefaultTypeInternal _CSBuyOrSellReq_default_instance_;
PROTOBUF_CONSTEXPR CSBuyOrSellRsp::CSBuyOrSellRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.req_)*/nullptr
  , /*decltype(_impl_.result_)*/0} {}
struct CSBuyOrSellRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSBuyOrSellRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSBuyOrSellRspDefaultTypeInternal() {}
  union {
    CSBuyOrSellRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSBuyOrSellRspDefaultTypeInternal _CSBuyOrSellRsp_default_instance_;
PROTOBUF_CONSTEXPR PacketReq::PacketReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.packet_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PacketReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketReqDefaultTypeInternal() {}
  union {
    PacketReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketReqDefaultTypeInternal _PacketReq_default_instance_;
PROTOBUF_CONSTEXPR PacketRsp::PacketRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.packet_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PacketRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketRspDefaultTypeInternal() {}
  union {
    PacketRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketRspDefaultTypeInternal _PacketRsp_default_instance_;
static ::_pb::Metadata file_level_metadata_msg_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_msg_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_msg_2eproto = nullptr;

const uint32_t TableStruct_msg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CSBuyOrSellReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSBuyOrSellReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSBuyOrSellReq, _impl_.is_buy_),
  PROTOBUF_FIELD_OFFSET(::CSBuyOrSellReq, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::CSBuyOrSellReq, _impl_.money_),
  PROTOBUF_FIELD_OFFSET(::CSBuyOrSellReq, _impl_.num_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CSBuyOrSellRsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSBuyOrSellRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSBuyOrSellRsp, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CSBuyOrSellRsp, _impl_.req_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PacketReq, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::PacketReq, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::PacketReq, _impl_.packet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PacketRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::PacketRsp, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::PacketRsp, _impl_.packet_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::CSBuyOrSellReq)},
  { 14, 22, -1, sizeof(::CSBuyOrSellRsp)},
  { 24, -1, -1, sizeof(::PacketReq)},
  { 32, -1, -1, sizeof(::PacketRsp)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CSBuyOrSellReq_default_instance_._instance,
  &::_CSBuyOrSellRsp_default_instance_._instance,
  &::_PacketReq_default_instance_._instance,
  &::_PacketRsp_default_instance_._instance,
};

const char descriptor_table_protodef_msg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmsg.proto\"\204\001\n\016CSBuyOrSellReq\022\023\n\006is_buy"
  "\030\001 \001(\010H\000\210\001\001\022\021\n\004code\030\002 \001(\tH\001\210\001\001\022\022\n\005money\030"
  "\003 \001(\tH\002\210\001\001\022\020\n\003num\030\004 \001(\tH\003\210\001\001B\t\n\007_is_buyB"
  "\007\n\005_codeB\010\n\006_moneyB\006\n\004_num\"[\n\016CSBuyOrSel"
  "lRsp\022\023\n\006result\030\001 \001(\005H\000\210\001\001\022!\n\003req\030\002 \001(\0132\017"
  ".CSBuyOrSellReqH\001\210\001\001B\t\n\007_resultB\006\n\004_req\""
  "4\n\tPacketReq\022\035\n\002bs\030\001 \001(\0132\017.CSBuyOrSellRe"
  "qH\000B\010\n\006packet\"4\n\tPacketRsp\022\035\n\002bs\030\001 \001(\0132\017"
  ".CSBuyOrSellRspH\000B\010\n\006packetB\nZ\010main/pb3b"
  "\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_msg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_msg_2eproto = {
    false, false, 367, descriptor_table_protodef_msg_2eproto,
    "msg.proto",
    &descriptor_table_msg_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_msg_2eproto::offsets,
    file_level_metadata_msg_2eproto, file_level_enum_descriptors_msg_2eproto,
    file_level_service_descriptors_msg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_msg_2eproto_getter() {
  return &descriptor_table_msg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_msg_2eproto(&descriptor_table_msg_2eproto);

// ===================================================================

class CSBuyOrSellReq::_Internal {
 public:
  using HasBits = decltype(std::declval<CSBuyOrSellReq>()._impl_._has_bits_);
  static void set_has_is_buy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_money(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSBuyOrSellReq::CSBuyOrSellReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSBuyOrSellReq)
}
CSBuyOrSellReq::CSBuyOrSellReq(const CSBuyOrSellReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSBuyOrSellReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.code_){}
    , decltype(_impl_.money_){}
    , decltype(_impl_.num_){}
    , decltype(_impl_.is_buy_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_code()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.money_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.money_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_money()) {
    _this->_impl_.money_.Set(from._internal_money(), 
      _this->GetArenaForAllocation());
  }
  _impl_.num_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.num_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_num()) {
    _this->_impl_.num_.Set(from._internal_num(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.is_buy_ = from._impl_.is_buy_;
  // @@protoc_insertion_point(copy_constructor:CSBuyOrSellReq)
}

inline void CSBuyOrSellReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.code_){}
    , decltype(_impl_.money_){}
    , decltype(_impl_.num_){}
    , decltype(_impl_.is_buy_){false}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.money_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.money_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.num_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.num_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSBuyOrSellReq::~CSBuyOrSellReq() {
  // @@protoc_insertion_point(destructor:CSBuyOrSellReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSBuyOrSellReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
  _impl_.money_.Destroy();
  _impl_.num_.Destroy();
}

void CSBuyOrSellReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSBuyOrSellReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CSBuyOrSellReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.money_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.num_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.is_buy_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSBuyOrSellReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_buy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_buy(&has_bits);
          _impl_.is_buy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CSBuyOrSellReq.code"));
        } else
          goto handle_unusual;
        continue;
      // optional string money = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_money();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CSBuyOrSellReq.money"));
        } else
          goto handle_unusual;
        continue;
      // optional string num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_num();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CSBuyOrSellReq.num"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSBuyOrSellReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSBuyOrSellReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool is_buy = 1;
  if (_internal_has_is_buy()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_buy(), target);
  }

  // optional string code = 2;
  if (_internal_has_code()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CSBuyOrSellReq.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // optional string money = 3;
  if (_internal_has_money()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_money().data(), static_cast<int>(this->_internal_money().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CSBuyOrSellReq.money");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_money(), target);
  }

  // optional string num = 4;
  if (_internal_has_num()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_num().data(), static_cast<int>(this->_internal_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CSBuyOrSellReq.num");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSBuyOrSellReq)
  return target;
}

size_t CSBuyOrSellReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSBuyOrSellReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code());
    }

    // optional string money = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_money());
    }

    // optional string num = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_num());
    }

    // optional bool is_buy = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSBuyOrSellReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSBuyOrSellReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSBuyOrSellReq::GetClassData() const { return &_class_data_; }


void CSBuyOrSellReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSBuyOrSellReq*>(&to_msg);
  auto& from = static_cast<const CSBuyOrSellReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSBuyOrSellReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_code(from._internal_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_money(from._internal_money());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_num(from._internal_num());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_buy_ = from._impl_.is_buy_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSBuyOrSellReq::CopyFrom(const CSBuyOrSellReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSBuyOrSellReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyOrSellReq::IsInitialized() const {
  return true;
}

void CSBuyOrSellReq::InternalSwap(CSBuyOrSellReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.money_, lhs_arena,
      &other->_impl_.money_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.num_, lhs_arena,
      &other->_impl_.num_, rhs_arena
  );
  swap(_impl_.is_buy_, other->_impl_.is_buy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSBuyOrSellReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[0]);
}

// ===================================================================

class CSBuyOrSellRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<CSBuyOrSellRsp>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CSBuyOrSellReq& req(const CSBuyOrSellRsp* msg);
  static void set_has_req(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CSBuyOrSellReq&
CSBuyOrSellRsp::_Internal::req(const CSBuyOrSellRsp* msg) {
  return *msg->_impl_.req_;
}
CSBuyOrSellRsp::CSBuyOrSellRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSBuyOrSellRsp)
}
CSBuyOrSellRsp::CSBuyOrSellRsp(const CSBuyOrSellRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSBuyOrSellRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.req_){nullptr}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_req()) {
    _this->_impl_.req_ = new ::CSBuyOrSellReq(*from._impl_.req_);
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CSBuyOrSellRsp)
}

inline void CSBuyOrSellRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.req_){nullptr}
    , decltype(_impl_.result_){0}
  };
}

CSBuyOrSellRsp::~CSBuyOrSellRsp() {
  // @@protoc_insertion_point(destructor:CSBuyOrSellRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSBuyOrSellRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.req_;
}

void CSBuyOrSellRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSBuyOrSellRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CSBuyOrSellRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.req_ != nullptr);
    _impl_.req_->Clear();
  }
  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSBuyOrSellRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CSBuyOrSellReq req = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSBuyOrSellRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSBuyOrSellRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 result = 1;
  if (_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // optional .CSBuyOrSellReq req = 2;
  if (_internal_has_req()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::req(this),
        _Internal::req(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSBuyOrSellRsp)
  return target;
}

size_t CSBuyOrSellRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSBuyOrSellRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CSBuyOrSellReq req = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.req_);
    }

    // optional int32 result = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSBuyOrSellRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSBuyOrSellRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSBuyOrSellRsp::GetClassData() const { return &_class_data_; }


void CSBuyOrSellRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSBuyOrSellRsp*>(&to_msg);
  auto& from = static_cast<const CSBuyOrSellRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSBuyOrSellRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_req()->::CSBuyOrSellReq::MergeFrom(
          from._internal_req());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSBuyOrSellRsp::CopyFrom(const CSBuyOrSellRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSBuyOrSellRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyOrSellRsp::IsInitialized() const {
  return true;
}

void CSBuyOrSellRsp::InternalSwap(CSBuyOrSellRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSBuyOrSellRsp, _impl_.result_)
      + sizeof(CSBuyOrSellRsp::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(CSBuyOrSellRsp, _impl_.req_)>(
          reinterpret_cast<char*>(&_impl_.req_),
          reinterpret_cast<char*>(&other->_impl_.req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSBuyOrSellRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[1]);
}

// ===================================================================

class PacketReq::_Internal {
 public:
  static const ::CSBuyOrSellReq& bs(const PacketReq* msg);
};

const ::CSBuyOrSellReq&
PacketReq::_Internal::bs(const PacketReq* msg) {
  return *msg->_impl_.packet_.bs_;
}
void PacketReq::set_allocated_bs(::CSBuyOrSellReq* bs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (bs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bs);
    if (message_arena != submessage_arena) {
      bs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bs, submessage_arena);
    }
    set_has_bs();
    _impl_.packet_.bs_ = bs;
  }
  // @@protoc_insertion_point(field_set_allocated:PacketReq.bs)
}
PacketReq::PacketReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PacketReq)
}
PacketReq::PacketReq(const PacketReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PacketReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_packet();
  switch (from.packet_case()) {
    case kBs: {
      _this->_internal_mutable_bs()->::CSBuyOrSellReq::MergeFrom(
          from._internal_bs());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:PacketReq)
}

inline void PacketReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_packet();
}

PacketReq::~PacketReq() {
  // @@protoc_insertion_point(destructor:PacketReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_packet()) {
    clear_packet();
  }
}

void PacketReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketReq::clear_packet() {
// @@protoc_insertion_point(one_of_clear_start:PacketReq)
  switch (packet_case()) {
    case kBs: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_.bs_;
      }
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PACKET_NOT_SET;
}


void PacketReq::Clear() {
// @@protoc_insertion_point(message_clear_start:PacketReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_packet();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CSBuyOrSellReq bs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PacketReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PacketReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .CSBuyOrSellReq bs = 1;
  if (_internal_has_bs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bs(this),
        _Internal::bs(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PacketReq)
  return target;
}

size_t PacketReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PacketReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (packet_case()) {
    // .CSBuyOrSellReq bs = 1;
    case kBs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_.bs_);
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PacketReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketReq::GetClassData() const { return &_class_data_; }


void PacketReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PacketReq*>(&to_msg);
  auto& from = static_cast<const PacketReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PacketReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.packet_case()) {
    case kBs: {
      _this->_internal_mutable_bs()->::CSBuyOrSellReq::MergeFrom(
          from._internal_bs());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketReq::CopyFrom(const PacketReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PacketReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketReq::IsInitialized() const {
  return true;
}

void PacketReq::InternalSwap(PacketReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.packet_, other->_impl_.packet_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[2]);
}

// ===================================================================

class PacketRsp::_Internal {
 public:
  static const ::CSBuyOrSellRsp& bs(const PacketRsp* msg);
};

const ::CSBuyOrSellRsp&
PacketRsp::_Internal::bs(const PacketRsp* msg) {
  return *msg->_impl_.packet_.bs_;
}
void PacketRsp::set_allocated_bs(::CSBuyOrSellRsp* bs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (bs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bs);
    if (message_arena != submessage_arena) {
      bs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bs, submessage_arena);
    }
    set_has_bs();
    _impl_.packet_.bs_ = bs;
  }
  // @@protoc_insertion_point(field_set_allocated:PacketRsp.bs)
}
PacketRsp::PacketRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PacketRsp)
}
PacketRsp::PacketRsp(const PacketRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PacketRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_packet();
  switch (from.packet_case()) {
    case kBs: {
      _this->_internal_mutable_bs()->::CSBuyOrSellRsp::MergeFrom(
          from._internal_bs());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:PacketRsp)
}

inline void PacketRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_packet();
}

PacketRsp::~PacketRsp() {
  // @@protoc_insertion_point(destructor:PacketRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_packet()) {
    clear_packet();
  }
}

void PacketRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketRsp::clear_packet() {
// @@protoc_insertion_point(one_of_clear_start:PacketRsp)
  switch (packet_case()) {
    case kBs: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_.bs_;
      }
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PACKET_NOT_SET;
}


void PacketRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:PacketRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_packet();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CSBuyOrSellRsp bs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PacketRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PacketRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .CSBuyOrSellRsp bs = 1;
  if (_internal_has_bs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bs(this),
        _Internal::bs(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PacketRsp)
  return target;
}

size_t PacketRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PacketRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (packet_case()) {
    // .CSBuyOrSellRsp bs = 1;
    case kBs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_.bs_);
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PacketRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketRsp::GetClassData() const { return &_class_data_; }


void PacketRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PacketRsp*>(&to_msg);
  auto& from = static_cast<const PacketRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PacketRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.packet_case()) {
    case kBs: {
      _this->_internal_mutable_bs()->::CSBuyOrSellRsp::MergeFrom(
          from._internal_bs());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketRsp::CopyFrom(const PacketRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PacketRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketRsp::IsInitialized() const {
  return true;
}

void PacketRsp::InternalSwap(PacketRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.packet_, other->_impl_.packet_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CSBuyOrSellReq*
Arena::CreateMaybeMessage< ::CSBuyOrSellReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSBuyOrSellReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CSBuyOrSellRsp*
Arena::CreateMaybeMessage< ::CSBuyOrSellRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSBuyOrSellRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::PacketReq*
Arena::CreateMaybeMessage< ::PacketReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PacketReq >(arena);
}
template<> PROTOBUF_NOINLINE ::PacketRsp*
Arena::CreateMaybeMessage< ::PacketRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PacketRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
