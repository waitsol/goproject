// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
class CSBuyOrSellReq;
struct CSBuyOrSellReqDefaultTypeInternal;
extern CSBuyOrSellReqDefaultTypeInternal _CSBuyOrSellReq_default_instance_;
class CSBuyOrSellRsp;
struct CSBuyOrSellRspDefaultTypeInternal;
extern CSBuyOrSellRspDefaultTypeInternal _CSBuyOrSellRsp_default_instance_;
class PacketReq;
struct PacketReqDefaultTypeInternal;
extern PacketReqDefaultTypeInternal _PacketReq_default_instance_;
class PacketRsp;
struct PacketRspDefaultTypeInternal;
extern PacketRspDefaultTypeInternal _PacketRsp_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CSBuyOrSellReq* Arena::CreateMaybeMessage<::CSBuyOrSellReq>(Arena*);
template<> ::CSBuyOrSellRsp* Arena::CreateMaybeMessage<::CSBuyOrSellRsp>(Arena*);
template<> ::PacketReq* Arena::CreateMaybeMessage<::PacketReq>(Arena*);
template<> ::PacketRsp* Arena::CreateMaybeMessage<::PacketRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CSBuyOrSellReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSBuyOrSellReq) */ {
 public:
  inline CSBuyOrSellReq() : CSBuyOrSellReq(nullptr) {}
  ~CSBuyOrSellReq() override;
  explicit PROTOBUF_CONSTEXPR CSBuyOrSellReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSBuyOrSellReq(const CSBuyOrSellReq& from);
  CSBuyOrSellReq(CSBuyOrSellReq&& from) noexcept
    : CSBuyOrSellReq() {
    *this = ::std::move(from);
  }

  inline CSBuyOrSellReq& operator=(const CSBuyOrSellReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSBuyOrSellReq& operator=(CSBuyOrSellReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSBuyOrSellReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSBuyOrSellReq* internal_default_instance() {
    return reinterpret_cast<const CSBuyOrSellReq*>(
               &_CSBuyOrSellReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSBuyOrSellReq& a, CSBuyOrSellReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CSBuyOrSellReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSBuyOrSellReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSBuyOrSellReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSBuyOrSellReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSBuyOrSellReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSBuyOrSellReq& from) {
    CSBuyOrSellReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSBuyOrSellReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSBuyOrSellReq";
  }
  protected:
  explicit CSBuyOrSellReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kMoneyFieldNumber = 3,
    kNumFieldNumber = 4,
    kIsBuyFieldNumber = 1,
  };
  // optional string code = 2;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // optional string money = 3;
  bool has_money() const;
  private:
  bool _internal_has_money() const;
  public:
  void clear_money();
  const std::string& money() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_money(ArgT0&& arg0, ArgT... args);
  std::string* mutable_money();
  PROTOBUF_NODISCARD std::string* release_money();
  void set_allocated_money(std::string* money);
  private:
  const std::string& _internal_money() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_money(const std::string& value);
  std::string* _internal_mutable_money();
  public:

  // optional string num = 4;
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  const std::string& num() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_num(ArgT0&& arg0, ArgT... args);
  std::string* mutable_num();
  PROTOBUF_NODISCARD std::string* release_num();
  void set_allocated_num(std::string* num);
  private:
  const std::string& _internal_num() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_num(const std::string& value);
  std::string* _internal_mutable_num();
  public:

  // optional bool is_buy = 1;
  bool has_is_buy() const;
  private:
  bool _internal_has_is_buy() const;
  public:
  void clear_is_buy();
  bool is_buy() const;
  void set_is_buy(bool value);
  private:
  bool _internal_is_buy() const;
  void _internal_set_is_buy(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSBuyOrSellReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr money_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr num_;
    bool is_buy_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CSBuyOrSellRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSBuyOrSellRsp) */ {
 public:
  inline CSBuyOrSellRsp() : CSBuyOrSellRsp(nullptr) {}
  ~CSBuyOrSellRsp() override;
  explicit PROTOBUF_CONSTEXPR CSBuyOrSellRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSBuyOrSellRsp(const CSBuyOrSellRsp& from);
  CSBuyOrSellRsp(CSBuyOrSellRsp&& from) noexcept
    : CSBuyOrSellRsp() {
    *this = ::std::move(from);
  }

  inline CSBuyOrSellRsp& operator=(const CSBuyOrSellRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSBuyOrSellRsp& operator=(CSBuyOrSellRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSBuyOrSellRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSBuyOrSellRsp* internal_default_instance() {
    return reinterpret_cast<const CSBuyOrSellRsp*>(
               &_CSBuyOrSellRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CSBuyOrSellRsp& a, CSBuyOrSellRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CSBuyOrSellRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSBuyOrSellRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSBuyOrSellRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSBuyOrSellRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSBuyOrSellRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSBuyOrSellRsp& from) {
    CSBuyOrSellRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSBuyOrSellRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSBuyOrSellRsp";
  }
  protected:
  explicit CSBuyOrSellRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // optional .CSBuyOrSellReq req = 2;
  bool has_req() const;
  private:
  bool _internal_has_req() const;
  public:
  void clear_req();
  const ::CSBuyOrSellReq& req() const;
  PROTOBUF_NODISCARD ::CSBuyOrSellReq* release_req();
  ::CSBuyOrSellReq* mutable_req();
  void set_allocated_req(::CSBuyOrSellReq* req);
  private:
  const ::CSBuyOrSellReq& _internal_req() const;
  ::CSBuyOrSellReq* _internal_mutable_req();
  public:
  void unsafe_arena_set_allocated_req(
      ::CSBuyOrSellReq* req);
  ::CSBuyOrSellReq* unsafe_arena_release_req();

  // optional int32 result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSBuyOrSellRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CSBuyOrSellReq* req_;
    int32_t result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class PacketReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PacketReq) */ {
 public:
  inline PacketReq() : PacketReq(nullptr) {}
  ~PacketReq() override;
  explicit PROTOBUF_CONSTEXPR PacketReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketReq(const PacketReq& from);
  PacketReq(PacketReq&& from) noexcept
    : PacketReq() {
    *this = ::std::move(from);
  }

  inline PacketReq& operator=(const PacketReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketReq& operator=(PacketReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketReq& default_instance() {
    return *internal_default_instance();
  }
  enum PacketCase {
    kBs = 1,
    PACKET_NOT_SET = 0,
  };

  static inline const PacketReq* internal_default_instance() {
    return reinterpret_cast<const PacketReq*>(
               &_PacketReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PacketReq& a, PacketReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PacketReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PacketReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PacketReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PacketReq& from) {
    PacketReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PacketReq";
  }
  protected:
  explicit PacketReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBsFieldNumber = 1,
  };
  // .CSBuyOrSellReq bs = 1;
  bool has_bs() const;
  private:
  bool _internal_has_bs() const;
  public:
  void clear_bs();
  const ::CSBuyOrSellReq& bs() const;
  PROTOBUF_NODISCARD ::CSBuyOrSellReq* release_bs();
  ::CSBuyOrSellReq* mutable_bs();
  void set_allocated_bs(::CSBuyOrSellReq* bs);
  private:
  const ::CSBuyOrSellReq& _internal_bs() const;
  ::CSBuyOrSellReq* _internal_mutable_bs();
  public:
  void unsafe_arena_set_allocated_bs(
      ::CSBuyOrSellReq* bs);
  ::CSBuyOrSellReq* unsafe_arena_release_bs();

  void clear_packet();
  PacketCase packet_case() const;
  // @@protoc_insertion_point(class_scope:PacketReq)
 private:
  class _Internal;
  void set_has_bs();

  inline bool has_packet() const;
  inline void clear_has_packet();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PacketUnion {
      constexpr PacketUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::CSBuyOrSellReq* bs_;
    } packet_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class PacketRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PacketRsp) */ {
 public:
  inline PacketRsp() : PacketRsp(nullptr) {}
  ~PacketRsp() override;
  explicit PROTOBUF_CONSTEXPR PacketRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketRsp(const PacketRsp& from);
  PacketRsp(PacketRsp&& from) noexcept
    : PacketRsp() {
    *this = ::std::move(from);
  }

  inline PacketRsp& operator=(const PacketRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketRsp& operator=(PacketRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketRsp& default_instance() {
    return *internal_default_instance();
  }
  enum PacketCase {
    kBs = 1,
    PACKET_NOT_SET = 0,
  };

  static inline const PacketRsp* internal_default_instance() {
    return reinterpret_cast<const PacketRsp*>(
               &_PacketRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PacketRsp& a, PacketRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PacketRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PacketRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PacketRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PacketRsp& from) {
    PacketRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PacketRsp";
  }
  protected:
  explicit PacketRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBsFieldNumber = 1,
  };
  // .CSBuyOrSellRsp bs = 1;
  bool has_bs() const;
  private:
  bool _internal_has_bs() const;
  public:
  void clear_bs();
  const ::CSBuyOrSellRsp& bs() const;
  PROTOBUF_NODISCARD ::CSBuyOrSellRsp* release_bs();
  ::CSBuyOrSellRsp* mutable_bs();
  void set_allocated_bs(::CSBuyOrSellRsp* bs);
  private:
  const ::CSBuyOrSellRsp& _internal_bs() const;
  ::CSBuyOrSellRsp* _internal_mutable_bs();
  public:
  void unsafe_arena_set_allocated_bs(
      ::CSBuyOrSellRsp* bs);
  ::CSBuyOrSellRsp* unsafe_arena_release_bs();

  void clear_packet();
  PacketCase packet_case() const;
  // @@protoc_insertion_point(class_scope:PacketRsp)
 private:
  class _Internal;
  void set_has_bs();

  inline bool has_packet() const;
  inline void clear_has_packet();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PacketUnion {
      constexpr PacketUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::CSBuyOrSellRsp* bs_;
    } packet_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSBuyOrSellReq

// optional bool is_buy = 1;
inline bool CSBuyOrSellReq::_internal_has_is_buy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSBuyOrSellReq::has_is_buy() const {
  return _internal_has_is_buy();
}
inline void CSBuyOrSellReq::clear_is_buy() {
  _impl_.is_buy_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CSBuyOrSellReq::_internal_is_buy() const {
  return _impl_.is_buy_;
}
inline bool CSBuyOrSellReq::is_buy() const {
  // @@protoc_insertion_point(field_get:CSBuyOrSellReq.is_buy)
  return _internal_is_buy();
}
inline void CSBuyOrSellReq::_internal_set_is_buy(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.is_buy_ = value;
}
inline void CSBuyOrSellReq::set_is_buy(bool value) {
  _internal_set_is_buy(value);
  // @@protoc_insertion_point(field_set:CSBuyOrSellReq.is_buy)
}

// optional string code = 2;
inline bool CSBuyOrSellReq::_internal_has_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSBuyOrSellReq::has_code() const {
  return _internal_has_code();
}
inline void CSBuyOrSellReq::clear_code() {
  _impl_.code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSBuyOrSellReq::code() const {
  // @@protoc_insertion_point(field_get:CSBuyOrSellReq.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSBuyOrSellReq::set_code(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSBuyOrSellReq.code)
}
inline std::string* CSBuyOrSellReq::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:CSBuyOrSellReq.code)
  return _s;
}
inline const std::string& CSBuyOrSellReq::_internal_code() const {
  return _impl_.code_.Get();
}
inline void CSBuyOrSellReq::_internal_set_code(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* CSBuyOrSellReq::_internal_mutable_code() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.code_.Mutable(GetArenaForAllocation());
}
inline std::string* CSBuyOrSellReq::release_code() {
  // @@protoc_insertion_point(field_release:CSBuyOrSellReq.code)
  if (!_internal_has_code()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSBuyOrSellReq::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSBuyOrSellReq.code)
}

// optional string money = 3;
inline bool CSBuyOrSellReq::_internal_has_money() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSBuyOrSellReq::has_money() const {
  return _internal_has_money();
}
inline void CSBuyOrSellReq::clear_money() {
  _impl_.money_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSBuyOrSellReq::money() const {
  // @@protoc_insertion_point(field_get:CSBuyOrSellReq.money)
  return _internal_money();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSBuyOrSellReq::set_money(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.money_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSBuyOrSellReq.money)
}
inline std::string* CSBuyOrSellReq::mutable_money() {
  std::string* _s = _internal_mutable_money();
  // @@protoc_insertion_point(field_mutable:CSBuyOrSellReq.money)
  return _s;
}
inline const std::string& CSBuyOrSellReq::_internal_money() const {
  return _impl_.money_.Get();
}
inline void CSBuyOrSellReq::_internal_set_money(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.money_.Set(value, GetArenaForAllocation());
}
inline std::string* CSBuyOrSellReq::_internal_mutable_money() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.money_.Mutable(GetArenaForAllocation());
}
inline std::string* CSBuyOrSellReq::release_money() {
  // @@protoc_insertion_point(field_release:CSBuyOrSellReq.money)
  if (!_internal_has_money()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.money_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.money_.IsDefault()) {
    _impl_.money_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSBuyOrSellReq::set_allocated_money(std::string* money) {
  if (money != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.money_.SetAllocated(money, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.money_.IsDefault()) {
    _impl_.money_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSBuyOrSellReq.money)
}

// optional string num = 4;
inline bool CSBuyOrSellReq::_internal_has_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSBuyOrSellReq::has_num() const {
  return _internal_has_num();
}
inline void CSBuyOrSellReq::clear_num() {
  _impl_.num_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CSBuyOrSellReq::num() const {
  // @@protoc_insertion_point(field_get:CSBuyOrSellReq.num)
  return _internal_num();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSBuyOrSellReq::set_num(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.num_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSBuyOrSellReq.num)
}
inline std::string* CSBuyOrSellReq::mutable_num() {
  std::string* _s = _internal_mutable_num();
  // @@protoc_insertion_point(field_mutable:CSBuyOrSellReq.num)
  return _s;
}
inline const std::string& CSBuyOrSellReq::_internal_num() const {
  return _impl_.num_.Get();
}
inline void CSBuyOrSellReq::_internal_set_num(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_.Set(value, GetArenaForAllocation());
}
inline std::string* CSBuyOrSellReq::_internal_mutable_num() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.num_.Mutable(GetArenaForAllocation());
}
inline std::string* CSBuyOrSellReq::release_num() {
  // @@protoc_insertion_point(field_release:CSBuyOrSellReq.num)
  if (!_internal_has_num()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.num_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.num_.IsDefault()) {
    _impl_.num_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSBuyOrSellReq::set_allocated_num(std::string* num) {
  if (num != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.num_.SetAllocated(num, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.num_.IsDefault()) {
    _impl_.num_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSBuyOrSellReq.num)
}

// -------------------------------------------------------------------

// CSBuyOrSellRsp

// optional int32 result = 1;
inline bool CSBuyOrSellRsp::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSBuyOrSellRsp::has_result() const {
  return _internal_has_result();
}
inline void CSBuyOrSellRsp::clear_result() {
  _impl_.result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CSBuyOrSellRsp::_internal_result() const {
  return _impl_.result_;
}
inline int32_t CSBuyOrSellRsp::result() const {
  // @@protoc_insertion_point(field_get:CSBuyOrSellRsp.result)
  return _internal_result();
}
inline void CSBuyOrSellRsp::_internal_set_result(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.result_ = value;
}
inline void CSBuyOrSellRsp::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CSBuyOrSellRsp.result)
}

// optional .CSBuyOrSellReq req = 2;
inline bool CSBuyOrSellRsp::_internal_has_req() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.req_ != nullptr);
  return value;
}
inline bool CSBuyOrSellRsp::has_req() const {
  return _internal_has_req();
}
inline void CSBuyOrSellRsp::clear_req() {
  if (_impl_.req_ != nullptr) _impl_.req_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CSBuyOrSellReq& CSBuyOrSellRsp::_internal_req() const {
  const ::CSBuyOrSellReq* p = _impl_.req_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSBuyOrSellReq&>(
      ::_CSBuyOrSellReq_default_instance_);
}
inline const ::CSBuyOrSellReq& CSBuyOrSellRsp::req() const {
  // @@protoc_insertion_point(field_get:CSBuyOrSellRsp.req)
  return _internal_req();
}
inline void CSBuyOrSellRsp::unsafe_arena_set_allocated_req(
    ::CSBuyOrSellReq* req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.req_);
  }
  _impl_.req_ = req;
  if (req) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSBuyOrSellRsp.req)
}
inline ::CSBuyOrSellReq* CSBuyOrSellRsp::release_req() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CSBuyOrSellReq* temp = _impl_.req_;
  _impl_.req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSBuyOrSellReq* CSBuyOrSellRsp::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_release:CSBuyOrSellRsp.req)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CSBuyOrSellReq* temp = _impl_.req_;
  _impl_.req_ = nullptr;
  return temp;
}
inline ::CSBuyOrSellReq* CSBuyOrSellRsp::_internal_mutable_req() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.req_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSBuyOrSellReq>(GetArenaForAllocation());
    _impl_.req_ = p;
  }
  return _impl_.req_;
}
inline ::CSBuyOrSellReq* CSBuyOrSellRsp::mutable_req() {
  ::CSBuyOrSellReq* _msg = _internal_mutable_req();
  // @@protoc_insertion_point(field_mutable:CSBuyOrSellRsp.req)
  return _msg;
}
inline void CSBuyOrSellRsp::set_allocated_req(::CSBuyOrSellReq* req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.req_;
  }
  if (req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(req);
    if (message_arena != submessage_arena) {
      req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.req_ = req;
  // @@protoc_insertion_point(field_set_allocated:CSBuyOrSellRsp.req)
}

// -------------------------------------------------------------------

// PacketReq

// .CSBuyOrSellReq bs = 1;
inline bool PacketReq::_internal_has_bs() const {
  return packet_case() == kBs;
}
inline bool PacketReq::has_bs() const {
  return _internal_has_bs();
}
inline void PacketReq::set_has_bs() {
  _impl_._oneof_case_[0] = kBs;
}
inline void PacketReq::clear_bs() {
  if (_internal_has_bs()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.packet_.bs_;
    }
    clear_has_packet();
  }
}
inline ::CSBuyOrSellReq* PacketReq::release_bs() {
  // @@protoc_insertion_point(field_release:PacketReq.bs)
  if (_internal_has_bs()) {
    clear_has_packet();
    ::CSBuyOrSellReq* temp = _impl_.packet_.bs_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.packet_.bs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CSBuyOrSellReq& PacketReq::_internal_bs() const {
  return _internal_has_bs()
      ? *_impl_.packet_.bs_
      : reinterpret_cast< ::CSBuyOrSellReq&>(::_CSBuyOrSellReq_default_instance_);
}
inline const ::CSBuyOrSellReq& PacketReq::bs() const {
  // @@protoc_insertion_point(field_get:PacketReq.bs)
  return _internal_bs();
}
inline ::CSBuyOrSellReq* PacketReq::unsafe_arena_release_bs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PacketReq.bs)
  if (_internal_has_bs()) {
    clear_has_packet();
    ::CSBuyOrSellReq* temp = _impl_.packet_.bs_;
    _impl_.packet_.bs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketReq::unsafe_arena_set_allocated_bs(::CSBuyOrSellReq* bs) {
  clear_packet();
  if (bs) {
    set_has_bs();
    _impl_.packet_.bs_ = bs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PacketReq.bs)
}
inline ::CSBuyOrSellReq* PacketReq::_internal_mutable_bs() {
  if (!_internal_has_bs()) {
    clear_packet();
    set_has_bs();
    _impl_.packet_.bs_ = CreateMaybeMessage< ::CSBuyOrSellReq >(GetArenaForAllocation());
  }
  return _impl_.packet_.bs_;
}
inline ::CSBuyOrSellReq* PacketReq::mutable_bs() {
  ::CSBuyOrSellReq* _msg = _internal_mutable_bs();
  // @@protoc_insertion_point(field_mutable:PacketReq.bs)
  return _msg;
}

inline bool PacketReq::has_packet() const {
  return packet_case() != PACKET_NOT_SET;
}
inline void PacketReq::clear_has_packet() {
  _impl_._oneof_case_[0] = PACKET_NOT_SET;
}
inline PacketReq::PacketCase PacketReq::packet_case() const {
  return PacketReq::PacketCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// PacketRsp

// .CSBuyOrSellRsp bs = 1;
inline bool PacketRsp::_internal_has_bs() const {
  return packet_case() == kBs;
}
inline bool PacketRsp::has_bs() const {
  return _internal_has_bs();
}
inline void PacketRsp::set_has_bs() {
  _impl_._oneof_case_[0] = kBs;
}
inline void PacketRsp::clear_bs() {
  if (_internal_has_bs()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.packet_.bs_;
    }
    clear_has_packet();
  }
}
inline ::CSBuyOrSellRsp* PacketRsp::release_bs() {
  // @@protoc_insertion_point(field_release:PacketRsp.bs)
  if (_internal_has_bs()) {
    clear_has_packet();
    ::CSBuyOrSellRsp* temp = _impl_.packet_.bs_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.packet_.bs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CSBuyOrSellRsp& PacketRsp::_internal_bs() const {
  return _internal_has_bs()
      ? *_impl_.packet_.bs_
      : reinterpret_cast< ::CSBuyOrSellRsp&>(::_CSBuyOrSellRsp_default_instance_);
}
inline const ::CSBuyOrSellRsp& PacketRsp::bs() const {
  // @@protoc_insertion_point(field_get:PacketRsp.bs)
  return _internal_bs();
}
inline ::CSBuyOrSellRsp* PacketRsp::unsafe_arena_release_bs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PacketRsp.bs)
  if (_internal_has_bs()) {
    clear_has_packet();
    ::CSBuyOrSellRsp* temp = _impl_.packet_.bs_;
    _impl_.packet_.bs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketRsp::unsafe_arena_set_allocated_bs(::CSBuyOrSellRsp* bs) {
  clear_packet();
  if (bs) {
    set_has_bs();
    _impl_.packet_.bs_ = bs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PacketRsp.bs)
}
inline ::CSBuyOrSellRsp* PacketRsp::_internal_mutable_bs() {
  if (!_internal_has_bs()) {
    clear_packet();
    set_has_bs();
    _impl_.packet_.bs_ = CreateMaybeMessage< ::CSBuyOrSellRsp >(GetArenaForAllocation());
  }
  return _impl_.packet_.bs_;
}
inline ::CSBuyOrSellRsp* PacketRsp::mutable_bs() {
  ::CSBuyOrSellRsp* _msg = _internal_mutable_bs();
  // @@protoc_insertion_point(field_mutable:PacketRsp.bs)
  return _msg;
}

inline bool PacketRsp::has_packet() const {
  return packet_case() != PACKET_NOT_SET;
}
inline void PacketRsp::clear_has_packet() {
  _impl_._oneof_case_[0] = PACKET_NOT_SET;
}
inline PacketRsp::PacketCase PacketRsp::packet_case() const {
  return PacketRsp::PacketCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
